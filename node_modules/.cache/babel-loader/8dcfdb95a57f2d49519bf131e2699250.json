{"ast":null,"code":"import _objectSpread from \"/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\nimport Content from './Content';\nimport './index.css';\n\nfunction createStore(reducer) {\n  let state = null;\n  const listeners = [];\n\n  const subscribe = listener => listeners.push(listener);\n\n  const getState = () => state;\n\n  const dispatch = action => {\n    state = reducer(state, action);\n    listeners.forEach(listener => listener());\n  };\n\n  dispatch({});\n  return {\n    getState,\n    dispatch,\n    subscribe\n  };\n}\n\nconst themeReducer = (state, action) => {\n  if (!state) return {\n    themeColor: 'red'\n  };\n\n  switch (action.type) {\n    case 'CHANGE_COLOR':\n      return _objectSpread({}, state, {\n        themeColor: action.themeColor\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(themeReducer);\n\nclass Index extends Component {\n  // 定义 context 对象 ， 设置 store 对象，方便子组件直接访问\n  getChildContext() {\n    return {\n      store\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }\n\n}\n\nIndex.childContextTypes = {\n  store: PropTypes.object\n};\nReactDOM.render(React.createElement(Index, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/index.js"],"names":["React","Component","PropTypes","ReactDOM","Header","Content","createStore","reducer","state","listeners","subscribe","listener","push","getState","dispatch","action","forEach","themeReducer","themeColor","type","store","Index","getChildContext","render","childContextTypes","object","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,aAAP;;AAEA,SAASC,WAAT,CAAqBC,OAArB,EAA6B;AACzB,MAAIC,KAAK,GAAG,IAAZ;AACA,QAAMC,SAAS,GAAG,EAAlB;;AACA,QAAMC,SAAS,GAAIC,QAAD,IAAcF,SAAS,CAACG,IAAV,CAAeD,QAAf,CAAhC;;AACA,QAAME,QAAQ,GAAG,MAAML,KAAvB;;AACA,QAAMM,QAAQ,GAAIC,MAAD,IAAY;AACzBP,IAAAA,KAAK,GAAGD,OAAO,CAACC,KAAD,EAASO,MAAT,CAAf;AACAN,IAAAA,SAAS,CAACO,OAAV,CAAmBL,QAAD,IAAcA,QAAQ,EAAxC;AACH,GAHD;;AAIAG,EAAAA,QAAQ,CAAC,EAAD,CAAR;AACA,SAAO;AAAED,IAAAA,QAAF;AAAaC,IAAAA,QAAb;AAAwBJ,IAAAA;AAAxB,GAAP;AACH;;AAED,MAAMO,YAAY,GAAG,CAACT,KAAD,EAASO,MAAT,KAAoB;AACrC,MAAG,CAACP,KAAJ,EAAW,OAAO;AACdU,IAAAA,UAAU,EAAG;AADC,GAAP;;AAGX,UAAQH,MAAM,CAACI,IAAf;AACI,SAAK,cAAL;AACI,+BAAYX,KAAZ;AAAoBU,QAAAA,UAAU,EAAGH,MAAM,CAACG;AAAxC;;AACJ;AACI,aAAOV,KAAP;AAJR;AAMH,CAVD;;AAYA,MAAMY,KAAK,GAAGd,WAAW,CAACW,YAAD,CAAzB;;AAEA,MAAMI,KAAN,SAAoBpB,SAApB,CAA6B;AACzB;AAKAqB,EAAAA,eAAe,GAAE;AACb,WAAO;AAAEF,MAAAA;AAAF,KAAP;AACH;;AAEDG,EAAAA,MAAM,GAAE;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AAjBwB;;AAAvBF,K,CAEKG,iB,GAAoB;AACvBJ,EAAAA,KAAK,EAAGlB,SAAS,CAACuB;AADK,C;AAkB/BtB,QAAQ,CAACoB,MAAT,CACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEIG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFJ","sourcesContent":["import React , { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom';\nimport Header from './Header'\nimport Content from './Content'\nimport './index.css';\n\nfunction createStore(reducer){\n    let state = null\n    const listeners = []\n    const subscribe = (listener) => listeners.push(listener)\n    const getState = () => state\n    const dispatch = (action) => {\n        state = reducer(state , action)\n        listeners.forEach((listener) => listener())\n    }\n    dispatch({})\n    return { getState , dispatch , subscribe }\n}\n\nconst themeReducer = (state , action) => {\n    if(!state) return {\n        themeColor : 'red'\n    }\n    switch (action.type) {\n        case 'CHANGE_COLOR':\n            return { ...state , themeColor : action.themeColor }\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(themeReducer)\n\nclass Index extends Component{\n    // 定义 context 对象 ， 设置 store 对象，方便子组件直接访问\n    static childContextTypes = {\n        store : PropTypes.object\n    }\n\n    getChildContext(){\n        return { store }\n    }\n    \n    render(){\n        return (\n            <div>\n                <Header/>\n                <Content/>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    <Index /> ,\n    document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}
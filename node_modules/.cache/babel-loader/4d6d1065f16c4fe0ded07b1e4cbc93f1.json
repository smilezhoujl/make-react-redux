{"ast":null,"code":"import _objectSpread from \"/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/react-redux.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nexport class Provider extends Component {\n  getChildContext() {\n    return {\n      store: this.props.store\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nProvider.propTypes = {\n  store: PropTypes.object,\n  children: PropTypes.any\n};\nProvider.childContextTypes = {\n  store: PropTypes.object\n};\nexport const connect = (mapStateToProps, mapDispatchToProps) => WrappedComponent => {\n  class Connect extends Component {\n    // 定义context对象 ，store 数据类型\n    constructor() {\n      super();\n      this.state = {\n        allProps: {}\n      };\n    }\n\n    componentWillMount() {\n      const store = this.context.store;\n\n      this._updateProps();\n\n      store.subscribe(() => this._updateProps());\n    }\n\n    _updateProps() {\n      const store = this.context.store;\n      let stateProps = mapStateToProps ? mapStateToProps(store.getState(), this.props) : {};\n      let dispatchProps = mapDispatchToProps ? mapDispatchToProps(store.dispatch, this.props) : {};\n      this.setState({\n        allProps: _objectSpread({}, stateProps, dispatchProps, this.props)\n      });\n    }\n\n    render() {\n      //    // 从 context 获取 store\n      //    const { store } = this.context\n      //    // 调用 mapStateToProps 传递 store.getState() 获取当前上下文需要的属性\n      //    let stateProps = mapStateToProps(store.getState())\n      //    // { ...stateProps } 意思是把这个对象里面的属性全部通过 ‘props’ 方式传递进去 \n      return React.createElement(WrappedComponent, Object.assign({}, this.state.allProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  Connect.contextTypes = {\n    store: PropTypes.object\n  };\n  return Connect;\n};","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/react-redux.js"],"names":["React","Component","PropTypes","Provider","getChildContext","store","props","render","children","propTypes","object","any","childContextTypes","connect","mapStateToProps","mapDispatchToProps","WrappedComponent","Connect","constructor","state","allProps","componentWillMount","context","_updateProps","subscribe","stateProps","getState","dispatchProps","dispatch","setState","contextTypes"],"mappings":";;AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAUpCG,EAAAA,eAAe,GAAI;AACjB,WAAO;AACLC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD;AADb,KAAP;AAGD;;AAEDE,EAAAA,MAAM,GAAI;AACR,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKD,KAAL,CAAWE,QAAjB,CADF;AAGD;;AApBmC;AAA3BL,Q,CACFM,S,GAAY;AACjBJ,EAAAA,KAAK,EAAEH,SAAS,CAACQ,MADA;AAEjBF,EAAAA,QAAQ,EAAEN,SAAS,CAACS;AAFH,C;AADVR,Q,CAMFS,iB,GAAoB;AACzBP,EAAAA,KAAK,EAAEH,SAAS,CAACQ;AADQ,C;AAkB/B,OAAO,MAAMG,OAAO,GAAG,CAACC,eAAD,EAAmBC,kBAAnB,KAA2CC,gBAAD,IAAsB;AACpF,QAAMC,OAAN,SAAsBhB,SAAtB,CAAgC;AAC5B;AAKAiB,IAAAA,WAAW,GAAE;AACT;AACA,WAAKC,KAAL,GAAa;AACTC,QAAAA,QAAQ,EAAG;AADF,OAAb;AAGH;;AAEDC,IAAAA,kBAAkB,GAAE;AAAA,YACRhB,KADQ,GACE,KAAKiB,OADP,CACRjB,KADQ;;AAEhB,WAAKkB,YAAL;;AACAlB,MAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM,KAAKD,YAAL,EAAtB;AACH;;AAEDA,IAAAA,YAAY,GAAE;AAAA,YACFlB,KADE,GACQ,KAAKiB,OADb,CACFjB,KADE;AAEV,UAAIoB,UAAU,GAAGX,eAAe,GAAGA,eAAe,CAACT,KAAK,CAACqB,QAAN,EAAD,EAAoB,KAAKpB,KAAzB,CAAlB,GAAoD,EAApF;AACA,UAAIqB,aAAa,GAAGZ,kBAAkB,GAAGA,kBAAkB,CAACV,KAAK,CAACuB,QAAP,EAAgB,KAAKtB,KAArB,CAArB,GAAmD,EAAzF;AACA,WAAKuB,QAAL,CAAc;AACVT,QAAAA,QAAQ,oBACDK,UADC,EAEDE,aAFC,EAGD,KAAKrB,KAHJ;AADE,OAAd;AAOH;;AAEDC,IAAAA,MAAM,GAAE;AACP;AACA;AACA;AACA;AACA;AACG,aAAO,oBAAC,gBAAD,oBAAuB,KAAKY,KAAL,CAAWC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH;;AAvC2B;;AAA1BH,EAAAA,OAD8E,CAGzEa,YAHyE,GAG1D;AAClBzB,IAAAA,KAAK,EAAGH,SAAS,CAACQ;AADA,GAH0D;AA0CpF,SAAOO,OAAP;AACF,CA3CM","sourcesContent":["import React , { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Provider extends Component {\n    static propTypes = {\n      store: PropTypes.object,\n      children: PropTypes.any\n    }\n  \n    static childContextTypes = {\n      store: PropTypes.object\n    }\n  \n    getChildContext () {\n      return {\n        store: this.props.store\n      }\n    }\n  \n    render () {\n      return (\n        <div>{this.props.children}</div>\n      )\n    }\n  }\n  \n\nexport const connect = (mapStateToProps , mapDispatchToProps) => (WrappedComponent) => {\n   class Connect extends Component {\n       // 定义context对象 ，store 数据类型\n       static contextTypes = {\n           store : PropTypes.object\n       }\n\n       constructor(){\n           super()\n           this.state = { \n               allProps : {} \n           }\n       }\n\n       componentWillMount(){\n           const { store } = this.context\n           this._updateProps()\n           store.subscribe(() => this._updateProps())\n       }\n\n       _updateProps(){\n           const { store } = this.context\n           let stateProps = mapStateToProps ? mapStateToProps(store.getState() , this.props) : {}\n           let dispatchProps = mapDispatchToProps ? mapDispatchToProps(store.dispatch,this.props) : {}\n           this.setState({\n               allProps : {\n                   ...stateProps ,\n                   ...dispatchProps ,\n                   ...this.props\n               }\n           })\n       }\n\n       render(){\n        //    // 从 context 获取 store\n        //    const { store } = this.context\n        //    // 调用 mapStateToProps 传递 store.getState() 获取当前上下文需要的属性\n        //    let stateProps = mapStateToProps(store.getState())\n        //    // { ...stateProps } 意思是把这个对象里面的属性全部通过 ‘props’ 方式传递进去 \n           return <WrappedComponent { ...this.state.allProps } />\n       }\n   }\n   return Connect\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n// const appState = {\n//     title : {\n//         text : 'React.js 小书',\n//         color : 'red'\n//     },\n//     content : {\n//         text : 'React.js 小书内容',\n//         color : 'green'\n//     }\n// }\nfunction stateChanger(state, action) {\n  if (!state) {\n    return {\n      title: {\n        text: 'React.js 小书',\n        color: 'red'\n      },\n      content: {\n        text: 'React.js 小书内容',\n        color: 'green'\n      }\n    };\n  }\n\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      return _objectSpread({}, state, {\n        title: _objectSpread({}, state.title, {\n          text: action.text\n        })\n      });\n\n    case 'UPDATE_TITLE_COLOR':\n      return _objectSpread({}, state, {\n        title: _objectSpread({}, state.title, {\n          color: action.color\n        })\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction createStore(stateChanger) {\n  let state = null;\n  const listeners = [];\n\n  const subscribe = listener => listeners.push(listener);\n\n  const getState = () => state;\n\n  const dispatch = action => {\n    state = stateChanger(state, action); // 覆盖原对象\n\n    listeners.forEach(listener => listener());\n  };\n\n  dispatch({}); //初始化 state (dispatch default return)\n\n  return {\n    getState,\n    dispatch,\n    subscribe\n  };\n}\n\nfunction renderApp(newAppState, oldAppState = {}) {\n  if (newAppState === oldAppState) return;\n  console.log('render app ...');\n  renderTitle(newAppState.title, oldAppState.title);\n  renderContent(newAppState.content, oldAppState.content);\n}\n\nfunction renderTitle(newTitle, oldTitle = {}) {\n  if (newTitle === oldTitle) return;\n  console.log('render title ...');\n  const titleDOM = document.getElementById('title');\n  titleDOM.innerHTML = newTitle.text;\n  titleDOM.style.color = newTitle.color;\n}\n\nfunction renderContent(newContent, oldContent = {}) {\n  if (newContent === oldContent) return;\n  console.log('render content ...');\n  const contentDOM = document.getElementById('content');\n  contentDOM.innerHTML = newContent.text;\n  contentDOM.style.color = newContent.color;\n}\n\nconst store = createStore(stateChanger);\nlet oldState = store.getState(); // 缓存旧的state\n\nstore.subscribe(() => {\n  const newState = store.getState(); // 数据可能变化，获取新的 state\n\n  renderApp(newState, oldState); // 把新旧的 state 传进去渲染\n\n  oldState = newState; // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n});\nrenderApp(store.getState()); //首次渲染\n\nstore.dispatch({\n  type: 'UPDATE_TITLE_TEXT',\n  text: '《React.js 小书》'\n});\nstore.dispatch({\n  type: 'UPDATE_TITLE_COLOR',\n  color: 'green'\n}); // renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/src/index.js"],"names":["stateChanger","state","action","title","text","color","content","type","createStore","listeners","subscribe","listener","push","getState","dispatch","forEach","renderApp","newAppState","oldAppState","console","log","renderTitle","renderContent","newTitle","oldTitle","titleDOM","document","getElementById","innerHTML","style","newContent","oldContent","contentDOM","store","oldState","newState"],"mappings":"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","sourcesContent":["// const appState = {\n//     title : {\n//         text : 'React.js 小书',\n//         color : 'red'\n//     },\n//     content : {\n//         text : 'React.js 小书内容',\n//         color : 'green'\n//     }\n// }\n\nfunction stateChanger(state , action){\n    if(!state){\n        return {\n            title : {\n                text : 'React.js 小书',\n                color : 'red'\n            },\n            content : {\n                text : 'React.js 小书内容',\n                color : 'green'\n            }\n        }\n    }\n    switch (action.type) {\n        case 'UPDATE_TITLE_TEXT':\n            return {\n                ...state ,\n                title : {\n                    ...state.title,\n                    text : action.text\n                }\n            }\n        case 'UPDATE_TITLE_COLOR':\n            return {\n                ...state ,\n                title : {\n                    ...state.title ,\n                    color : action.color\n                }\n            }\n        default:\n            return state;\n    }\n}\n\nfunction createStore (stateChanger) {\n    let state = null\n    const listeners = []\n    const subscribe = (listener) => listeners.push(listener)\n    const getState = () => state\n    const dispatch = (action) => {\n      state = stateChanger(state, action) // 覆盖原对象\n      listeners.forEach((listener) => listener())\n    }\n    dispatch({}) //初始化 state (dispatch default return)\n    return { getState, dispatch, subscribe }\n}\n\nfunction renderApp(newAppState , oldAppState = {}){\n    if(newAppState === oldAppState) return\n    console.log('render app ...')\n    renderTitle(newAppState.title , oldAppState.title)\n    renderContent(newAppState.content , oldAppState.content)\n}\n\nfunction renderTitle(newTitle , oldTitle = {}){\n    if(newTitle === oldTitle) return\n    console.log('render title ...')\n    const titleDOM = document.getElementById('title')\n    titleDOM.innerHTML = newTitle.text\n    titleDOM.style.color = newTitle.color\n}\n\nfunction renderContent(newContent , oldContent = {}){\n    if(newContent === oldContent) return\n    console.log('render content ...')\n    const contentDOM = document.getElementById('content')\n    contentDOM.innerHTML = newContent.text\n    contentDOM.style.color = newContent.color\n}\n\nconst store = createStore(stateChanger)\nlet oldState = store.getState() // 缓存旧的state\nstore.subscribe(() => {\n    const newState = store.getState() // 数据可能变化，获取新的 state\n    renderApp(newState, oldState) // 把新旧的 state 传进去渲染\n    oldState = newState // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n})\n\nrenderApp(store.getState()) //首次渲染\nstore.dispatch({ type : 'UPDATE_TITLE_TEXT', text : '《React.js 小书》' })\nstore.dispatch({ type : 'UPDATE_TITLE_COLOR', color : 'green' })\n// renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）"]},"metadata":{},"sourceType":"module"}
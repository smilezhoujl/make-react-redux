{"ast":null,"code":"var _jsxFileName = \"/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/react-redux.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nexport const connect = mapStateToProps => WrappedComponent => {\n  class Connect extends Component {\n    // 定义context对象 ，store 数据类型\n    render() {\n      // 从 context 获取 store\n      const store = this.context.store; // 调用 mapStateToProps 传递 store.getState() 获取当前上下文需要的属性\n\n      let stateProps = mapStateToProps(store.getState()); // { ...stateProps } 意思是把这个对象里面的属性全部通过 ‘props’ 方式传递进去 \n\n      return React.createElement(WrappedComponent, Object.assign({}, stateProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  Connect.contextTypes = {\n    store: PropTypes.object\n  };\n  return Connect;\n};","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/react-redux.js"],"names":["React","Component","PropTypes","connect","mapStateToProps","WrappedComponent","Connect","render","store","context","stateProps","getState","contextTypes","object"],"mappings":";AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,OAAO,GAAIC,eAAD,IAAsBC,gBAAD,IAAsB;AAC/D,QAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAC5B;AAKAM,IAAAA,MAAM,GAAE;AACJ;AADI,YAEIC,KAFJ,GAEc,KAAKC,OAFnB,CAEID,KAFJ,EAGJ;;AACA,UAAIE,UAAU,GAAGN,eAAe,CAACI,KAAK,CAACG,QAAN,EAAD,CAAhC,CAJI,CAKJ;;AACA,aAAO,oBAAC,gBAAD,oBAAuBD,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH;;AAb2B;;AAA1BJ,EAAAA,OADyD,CAGpDM,YAHoD,GAGrC;AAClBJ,IAAAA,KAAK,EAAGN,SAAS,CAACW;AADA,GAHqC;AAgB/D,SAAOP,OAAP;AACF,CAjBM","sourcesContent":["import React , { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const connect = (mapStateToProps) => (WrappedComponent) => {\n   class Connect extends Component {\n       // 定义context对象 ，store 数据类型\n       static contextTypes = {\n           store : PropTypes.object\n       }\n\n       render(){\n           // 从 context 获取 store\n           const { store } = this.context\n           // 调用 mapStateToProps 传递 store.getState() 获取当前上下文需要的属性\n           let stateProps = mapStateToProps(store.getState())\n           // { ...stateProps } 意思是把这个对象里面的属性全部通过 ‘props’ 方式传递进去 \n           return <WrappedComponent { ...stateProps } />\n       }\n   }\n   return Connect\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/ThemeSwitch.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ThemeSwitch extends Component {\n  constructor() {\n    super();\n    this.state = {\n      themeColor: ''\n    };\n  }\n\n  componentWillMount() {\n    const store = this.context.store;\n\n    this._updateThemeColor();\n\n    store.subscribe(() => this._updateThemeColor());\n  }\n\n  handleSwitchColor(color) {\n    console.log('color=' + color);\n    const store = this.context.store;\n    store.dispatch({\n      type: 'CHANGE_COLOR',\n      themeColor: color\n    });\n  }\n\n  _updateThemeColor() {\n    const store = this.context.store;\n    const state = store.getState();\n    this.setState({\n      themeColor: state.themeColor\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleSwitchColor.bind(this, 'red'),\n      style: {\n        color: this.state.themeColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Red\"), React.createElement(\"button\", {\n      onClick: this.handleSwitchColor.bind(this, 'blue'),\n      style: {\n        color: this.state.themeColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Blue\"));\n  }\n\n}\n\nThemeSwitch.contextTypes = {\n  store: PropTypes.object\n};\nexport default ThemeSwitch;","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/ThemeSwitch.js"],"names":["React","Component","PropTypes","ThemeSwitch","constructor","state","themeColor","componentWillMount","store","context","_updateThemeColor","subscribe","handleSwitchColor","color","console","log","dispatch","type","getState","setState","render","bind","contextTypes","object"],"mappings":";AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,WAAN,SAA0BF,SAA1B,CAAoC;AAMhCG,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,UAAU,EAAG;AAAf,KAAb;AACH;;AAEDC,EAAAA,kBAAkB,GAAE;AAAA,UACRC,KADQ,GACE,KAAKC,OADP,CACRD,KADQ;;AAEhB,SAAKE,iBAAL;;AACAF,IAAAA,KAAK,CAACG,SAAN,CAAgB,MAAM,KAAKD,iBAAL,EAAtB;AACH;;AAEDE,EAAAA,iBAAiB,CAACC,KAAD,EAAO;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWF,KAAvB;AADoB,UAEZL,KAFY,GAEF,KAAKC,OAFH,CAEZD,KAFY;AAGpBA,IAAAA,KAAK,CAACQ,QAAN,CAAe;AACXC,MAAAA,IAAI,EAAG,cADI;AAEXX,MAAAA,UAAU,EAAGO;AAFF,KAAf;AAIH;;AAEDH,EAAAA,iBAAiB,GAAE;AAAA,UACPF,KADO,GACG,KAAKC,OADR,CACPD,KADO;AAEf,UAAMH,KAAK,GAAGG,KAAK,CAACU,QAAN,EAAd;AACA,SAAKC,QAAL,CAAc;AAAEb,MAAAA,UAAU,EAAGD,KAAK,CAACC;AAArB,KAAd;AACH;;AAEDc,EAAAA,MAAM,GAAE;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,OAAO,EAAE,KAAKR,iBAAL,CAAuBS,IAAvB,CAA4B,IAA5B,EAAiC,KAAjC,CADb;AAEI,MAAA,KAAK,EAAE;AAAER,QAAAA,KAAK,EAAG,KAAKR,KAAL,CAAWC;AAArB,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAII;AACI,MAAA,OAAO,EAAE,KAAKM,iBAAL,CAAuBS,IAAvB,CAA4B,IAA5B,EAAiC,MAAjC,CADb;AAEI,MAAA,KAAK,EAAE;AAAER,QAAAA,KAAK,EAAG,KAAKR,KAAL,CAAWC;AAArB,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,CADJ;AAUH;;AA3C+B;;AAA9BH,W,CAEKmB,Y,GAAe;AAClBd,EAAAA,KAAK,EAAGN,SAAS,CAACqB;AADA,C;AA4C1B,eAAepB,WAAf","sourcesContent":["import React , { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass ThemeSwitch extends Component {\n\n    static contextTypes = {\n        store : PropTypes.object\n    }\n\n    constructor(){\n        super()\n        this.state = { themeColor : '' }\n    }\n\n    componentWillMount(){\n        const { store } = this.context\n        this._updateThemeColor()\n        store.subscribe(() => this._updateThemeColor())\n    }\n\n    handleSwitchColor(color){\n        console.log('color=' + color)\n        const { store } = this.context\n        store.dispatch({\n            type : 'CHANGE_COLOR',\n            themeColor : color\n        })\n    }\n\n    _updateThemeColor(){\n        const { store } = this.context\n        const state = store.getState()\n        this.setState({ themeColor : state.themeColor })\n    }\n\n    render(){\n        return (\n            <div>\n                <button\n                    onClick={this.handleSwitchColor.bind(this,'red')} \n                    style={{ color : this.state.themeColor }} >Red</button>\n                <button \n                    onClick={this.handleSwitchColor.bind(this,'blue')}\n                    style={{ color : this.state.themeColor }} >Blue</button>\n            </div>\n        )\n    }\n}\n\nexport default ThemeSwitch"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/src/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\nimport Content from './Content';\nimport './index.css';\n\nfunction createStore(reducer) {\n  let state = null;\n  const listeners = [];\n\n  const subscribe = listener => listeners.push(listener);\n\n  const getState = () => state;\n\n  const dispatch = action => {\n    state = reducer(state, action);\n    listeners.forEach(listener => listener());\n  };\n\n  dispatch({}); // 初始化 state\n\n  return {\n    getState,\n    dispatch,\n    subscribe\n  };\n}\n\nconst themeReducer = (state, action) => {\n  if (!state) return {\n    themeColor: 'red'\n  };\n\n  switch (action.type) {\n    case 'CHANGE_COLOR':\n      return _objectSpread({}, state, {\n        themeColor: action.themeColor\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(themeReducer);\n\nclass Index extends Component {\n  getChildContext() {\n    return {\n      store\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }\n\n} // const appState = {\n//     title : {\n//         text : 'React.js 小书',\n//         color : 'red'\n//     },\n//     content : {\n//         text : 'React.js 小书内容',\n//         color : 'green'\n//     }\n// }\n// function reducer(state , action){\n//     if(!state){\n//         return {\n//             title : {\n//                 text : 'React.js 小书',\n//                 color : 'red'\n//             },\n//             content : {\n//                 text : 'React.js 小书内容',\n//                 color : 'green'\n//             }\n//         }\n//     }\n//     switch (action.type) {\n//         case 'UPDATE_TITLE_TEXT':\n//             return {\n//                 ...state ,\n//                 title : {\n//                     ...state.title,\n//                     text : action.text\n//                 }\n//             }\n//         case 'UPDATE_TITLE_COLOR':\n//             return {\n//                 ...state ,\n//                 title : {\n//                     ...state.title ,\n//                     color : action.color\n//                 }\n//             }\n//         default:\n//             return state;\n//     }\n// }\n// function createStore (reducer) {\n//     let state = null\n//     const listeners = []\n//     const subscribe = (listener) => listeners.push(listener)\n//     const getState = () => state\n//     const dispatch = (action) => {\n//       state = reducer(state, action) // 覆盖原对象\n//       listeners.forEach((listener) => listener())\n//     }\n//     dispatch({}) //初始化 state (dispatch default return)\n//     return { getState, dispatch, subscribe }\n// }\n// function renderApp(newAppState , oldAppState = {}){\n//     if(newAppState === oldAppState) return\n//     console.log('render app ...')\n//     renderTitle(newAppState.title , oldAppState.title)\n//     renderContent(newAppState.content , oldAppState.content)\n// }\n// function renderTitle(newTitle , oldTitle = {}){\n//     if(newTitle === oldTitle) return\n//     console.log('render title ...')\n//     const titleDOM = document.getElementById('title')\n//     titleDOM.innerHTML = newTitle.text\n//     titleDOM.style.color = newTitle.color\n// }\n// function renderContent(newContent , oldContent = {}){\n//     if(newContent === oldContent) return\n//     console.log('render content ...')\n//     const contentDOM = document.getElementById('content')\n//     contentDOM.innerHTML = newContent.text\n//     contentDOM.style.color = newContent.color\n// }\n// const store = createStore(reducer)\n// let oldState = store.getState() // 缓存旧的state\n// store.subscribe(() => {\n//     const newState = store.getState() // 数据可能变化，获取新的 state\n//     renderApp(newState, oldState) // 把新旧的 state 传进去渲染\n//     oldState = newState // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n// })\n// renderApp(store.getState()) //首次渲染\n// store.dispatch({ type : 'UPDATE_TITLE_TEXT', text : '《React.js 小书》' })\n// store.dispatch({ type : 'UPDATE_TITLE_COLOR', color : 'green' })\n// // renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）\n\n\nIndex.childContextTypes = {\n  store: PropTypes.object\n};","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/src/index.js"],"names":["React","Component","PropTypes","ReactDOM","Header","Content","createStore","reducer","state","listeners","subscribe","listener","push","getState","dispatch","action","forEach","themeReducer","themeColor","type","store","Index","getChildContext","render","childContextTypes","object"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,aAAP;;AAGA,SAASC,WAAT,CAAsBC,OAAtB,EAA+B;AAC3B,MAAIC,KAAK,GAAG,IAAZ;AACA,QAAMC,SAAS,GAAG,EAAlB;;AACA,QAAMC,SAAS,GAAIC,QAAD,IAAcF,SAAS,CAACG,IAAV,CAAeD,QAAf,CAAhC;;AACA,QAAME,QAAQ,GAAG,MAAML,KAAvB;;AACA,QAAMM,QAAQ,GAAIC,MAAD,IAAY;AAC3BP,IAAAA,KAAK,GAAGD,OAAO,CAACC,KAAD,EAAQO,MAAR,CAAf;AACAN,IAAAA,SAAS,CAACO,OAAV,CAAmBL,QAAD,IAAcA,QAAQ,EAAxC;AACD,GAHD;;AAIAG,EAAAA,QAAQ,CAAC,EAAD,CAAR,CAT2B,CASd;;AACb,SAAO;AAAED,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBJ,IAAAA;AAAtB,GAAP;AACD;;AAED,MAAMO,YAAY,GAAG,CAACT,KAAD,EAAQO,MAAR,KAAmB;AACtC,MAAI,CAACP,KAAL,EAAY,OAAO;AACjBU,IAAAA,UAAU,EAAE;AADK,GAAP;;AAGZ,UAAQH,MAAM,CAACI,IAAf;AACE,SAAK,cAAL;AACE,+BAAYX,KAAZ;AAAmBU,QAAAA,UAAU,EAAEH,MAAM,CAACG;AAAtC;;AACF;AACE,aAAOV,KAAP;AAJJ;AAMD,CAVD;;AAYF,MAAMY,KAAK,GAAGd,WAAW,CAACW,YAAD,CAAzB;;AAEA,MAAMI,KAAN,SAAoBpB,SAApB,CAA8B;AAK1BqB,EAAAA,eAAe,GAAI;AACjB,WAAO;AAAEF,MAAAA;AAAF,KAAP;AACD;;AAEDG,EAAAA,MAAM,GAAI;AACR,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAhByB,C,CAoB9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAjHMF,K,CACKG,iB,GAAoB;AACzBJ,EAAAA,KAAK,EAAElB,SAAS,CAACuB;AADQ,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport Header from './Header'\nimport Content from './Content'\nimport './index.css'\n\n\nfunction createStore (reducer) {\n    let state = null\n    const listeners = []\n    const subscribe = (listener) => listeners.push(listener)\n    const getState = () => state\n    const dispatch = (action) => {\n      state = reducer(state, action)\n      listeners.forEach((listener) => listener())\n    }\n    dispatch({}) // 初始化 state\n    return { getState, dispatch, subscribe }\n  }\n  \n  const themeReducer = (state, action) => {\n    if (!state) return {\n      themeColor: 'red'\n    }\n    switch (action.type) {\n      case 'CHANGE_COLOR':\n        return { ...state, themeColor: action.themeColor }\n      default:\n        return state\n    }\n  }\n  \nconst store = createStore(themeReducer)\n\nclass Index extends Component {\n    static childContextTypes = {\n      store: PropTypes.object\n    }\n  \n    getChildContext () {\n      return { store }\n    }\n  \n    render () {\n      return (\n        <div>\n          <Header />\n          <Content />\n        </div>\n      )\n    }\n  }\n\n\n// const appState = {\n//     title : {\n//         text : 'React.js 小书',\n//         color : 'red'\n//     },\n//     content : {\n//         text : 'React.js 小书内容',\n//         color : 'green'\n//     }\n// }\n\n// function reducer(state , action){\n//     if(!state){\n//         return {\n//             title : {\n//                 text : 'React.js 小书',\n//                 color : 'red'\n//             },\n//             content : {\n//                 text : 'React.js 小书内容',\n//                 color : 'green'\n//             }\n//         }\n//     }\n//     switch (action.type) {\n//         case 'UPDATE_TITLE_TEXT':\n//             return {\n//                 ...state ,\n//                 title : {\n//                     ...state.title,\n//                     text : action.text\n//                 }\n//             }\n//         case 'UPDATE_TITLE_COLOR':\n//             return {\n//                 ...state ,\n//                 title : {\n//                     ...state.title ,\n//                     color : action.color\n//                 }\n//             }\n//         default:\n//             return state;\n//     }\n// }\n\n// function createStore (reducer) {\n//     let state = null\n//     const listeners = []\n//     const subscribe = (listener) => listeners.push(listener)\n//     const getState = () => state\n//     const dispatch = (action) => {\n//       state = reducer(state, action) // 覆盖原对象\n//       listeners.forEach((listener) => listener())\n//     }\n//     dispatch({}) //初始化 state (dispatch default return)\n//     return { getState, dispatch, subscribe }\n// }\n\n// function renderApp(newAppState , oldAppState = {}){\n//     if(newAppState === oldAppState) return\n//     console.log('render app ...')\n//     renderTitle(newAppState.title , oldAppState.title)\n//     renderContent(newAppState.content , oldAppState.content)\n// }\n\n// function renderTitle(newTitle , oldTitle = {}){\n//     if(newTitle === oldTitle) return\n//     console.log('render title ...')\n//     const titleDOM = document.getElementById('title')\n//     titleDOM.innerHTML = newTitle.text\n//     titleDOM.style.color = newTitle.color\n// }\n\n// function renderContent(newContent , oldContent = {}){\n//     if(newContent === oldContent) return\n//     console.log('render content ...')\n//     const contentDOM = document.getElementById('content')\n//     contentDOM.innerHTML = newContent.text\n//     contentDOM.style.color = newContent.color\n// }\n\n// const store = createStore(reducer)\n// let oldState = store.getState() // 缓存旧的state\n// store.subscribe(() => {\n//     const newState = store.getState() // 数据可能变化，获取新的 state\n//     renderApp(newState, oldState) // 把新旧的 state 传进去渲染\n//     oldState = newState // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n// })\n\n// renderApp(store.getState()) //首次渲染\n// store.dispatch({ type : 'UPDATE_TITLE_TEXT', text : '《React.js 小书》' })\n// store.dispatch({ type : 'UPDATE_TITLE_COLOR', color : 'green' })\n// // renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）\n\n\n"]},"metadata":{},"sourceType":"module"}
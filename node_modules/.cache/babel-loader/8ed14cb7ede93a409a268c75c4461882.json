{"ast":null,"code":"var _jsxFileName = \"/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/ThemeSwitch.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from './react-redux';\n\nclass ThemeSwitch extends Component {\n  handleSwitchColor(color) {\n    // console.log('color=' + color)\n    // const { store } = this.context\n    // store.dispatch({\n    //     type : 'CHANGE_COLOR',\n    //     themeColor : color\n    // })\n    if (this.props.onSwitchColor) {\n      this.props.onSwitchColor(color);\n    }\n  } // _updateThemeColor(){\n  //     const { store } = this.context\n  //     const state = store.getState()\n  //     this.setState({ themeColor : state.themeColor })\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleSwitchColor.bind(this, 'red'),\n      style: {\n        color: this.props.themeColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Red\"), React.createElement(\"button\", {\n      onClick: this.handleSwitchColor.bind(this, 'green'),\n      style: {\n        color: this.props.themeColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Green\"));\n  }\n\n} // 告诉高阶组件 connect ，根据 state 如何获取需要的属性\n\n\nThemeSwitch.PropTypes = {\n  themeColor: PropTypes.string,\n  onSwitchColor: PropTypes.func // constructor(){\n  //     super()\n  //     this.state = { themeColor : '' }\n  // }\n  // componentWillMount(){\n  //     const { store } = this.context\n  //     this._updateThemeColor()\n  //     store.subscribe(() => this._updateThemeColor())\n  // }\n\n};\n\nconst mapStateToProps = state => {\n  return {\n    themeColor: state.themeColor\n  };\n}; // 告诉高阶组件 connect , 根据 dispatch 执行哪些更新 state 状态的 action \n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSwitchColor: color => {\n      dispatch({\n        type: 'CHANGE_COLOR',\n        themeColor: color\n      });\n    }\n  };\n};\n\nThemeSwitch = connect(mapStateToProps, mapDispatchToProps)(ThemeSwitch);\nexport default ThemeSwitch;","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/colorredux/color_redux/src/ThemeSwitch.js"],"names":["React","Component","PropTypes","connect","ThemeSwitch","handleSwitchColor","color","props","onSwitchColor","render","bind","themeColor","string","func","mapStateToProps","state","mapDispatchToProps","dispatch","type"],"mappings":";AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,eAAxB;;AAEA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AAkBhCI,EAAAA,iBAAiB,CAACC,KAAD,EAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AAEA,QAAG,KAAKC,KAAL,CAAWC,aAAd,EAA4B;AACxB,WAAKD,KAAL,CAAWC,aAAX,CAAyBF,KAAzB;AACH;AACJ,GA7B+B,CA+BhC;AACA;AACA;AACA;AACA;;;AAEAG,EAAAA,MAAM,GAAE;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,OAAO,EAAE,KAAKJ,iBAAL,CAAuBK,IAAvB,CAA4B,IAA5B,EAAiC,KAAjC,CADb;AAEI,MAAA,KAAK,EAAE;AAAEJ,QAAAA,KAAK,EAAG,KAAKC,KAAL,CAAWI;AAArB,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAII;AACI,MAAA,OAAO,EAAE,KAAKN,iBAAL,CAAuBK,IAAvB,CAA4B,IAA5B,EAAiC,OAAjC,CADb;AAEI,MAAA,KAAK,EAAE;AAAEJ,QAAAA,KAAK,EAAG,KAAKC,KAAL,CAAWI;AAArB,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJJ,CADJ;AAUH;;AAhD+B,C,CAmDpC;;;AAnDMP,W,CAEKF,S,GAAY;AACfS,EAAAA,UAAU,EAAGT,SAAS,CAACU,MADR;AAEfJ,EAAAA,aAAa,EAAGN,SAAS,CAACW,IAFX,CAKnB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAdmB,C;;AAkDvB,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHJ,IAAAA,UAAU,EAAGI,KAAK,CAACJ;AADhB,GAAP;AAGH,CAJD,C,CAMA;;;AACA,MAAMK,kBAAkB,GAAIC,QAAD,IAAa;AACpC,SAAO;AACHT,IAAAA,aAAa,EAAIF,KAAD,IAAW;AACvBW,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAG,cAAT;AAA0BP,QAAAA,UAAU,EAAGL;AAAvC,OAAD,CAAR;AACH;AAHE,GAAP;AAKH,CAND;;AAQAF,WAAW,GAAGD,OAAO,CAACW,eAAD,EAAmBE,kBAAnB,CAAP,CAA8CZ,WAA9C,CAAd;AACA,eAAeA,WAAf","sourcesContent":["import React , { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from './react-redux'\n\nclass ThemeSwitch extends Component {\n\n    static PropTypes = {\n        themeColor : PropTypes.string ,\n        onSwitchColor : PropTypes.func\n    }\n\n    // constructor(){\n    //     super()\n    //     this.state = { themeColor : '' }\n    // }\n\n    // componentWillMount(){\n    //     const { store } = this.context\n    //     this._updateThemeColor()\n    //     store.subscribe(() => this._updateThemeColor())\n    // }\n\n    handleSwitchColor(color){\n        // console.log('color=' + color)\n        // const { store } = this.context\n        // store.dispatch({\n        //     type : 'CHANGE_COLOR',\n        //     themeColor : color\n        // })\n\n        if(this.props.onSwitchColor){\n            this.props.onSwitchColor(color)\n        }\n    }\n\n    // _updateThemeColor(){\n    //     const { store } = this.context\n    //     const state = store.getState()\n    //     this.setState({ themeColor : state.themeColor })\n    // }\n\n    render(){\n        return (\n            <div>\n                <button\n                    onClick={this.handleSwitchColor.bind(this,'red')} \n                    style={{ color : this.props.themeColor }} >Red</button>\n                <button \n                    onClick={this.handleSwitchColor.bind(this,'green')}\n                    style={{ color : this.props.themeColor }} >Green</button>\n            </div>\n        )\n    }\n}\n\n// 告诉高阶组件 connect ，根据 state 如何获取需要的属性\nconst mapStateToProps = (state) => {\n    return {\n        themeColor : state.themeColor\n    }\n}\n\n// 告诉高阶组件 connect , 根据 dispatch 执行哪些更新 state 状态的 action \nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        onSwitchColor : (color) => {\n            dispatch({ type : 'CHANGE_COLOR' , themeColor : color })\n        }\n    }\n}\n\nThemeSwitch = connect(mapStateToProps , mapDispatchToProps)(ThemeSwitch)\nexport default ThemeSwitch"]},"metadata":{},"sourceType":"module"}
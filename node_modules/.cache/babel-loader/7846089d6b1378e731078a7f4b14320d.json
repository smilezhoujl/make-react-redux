{"ast":null,"code":"import _objectSpread from \"/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst appState = {\n  title: {\n    text: 'React.js 小书',\n    color: 'red'\n  },\n  content: {\n    text: 'React.js 小书内容',\n    color: 'green'\n  }\n};\n\nfunction stateChanger(state, action) {\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      state.title.text = _objectSpread({}, state, {\n        title: _objectSpread({}, state.t)\n      });\n      break;\n\n    case 'UPDATE_TITLE_COLOR':\n      state.title.color = action.color;\n      break;\n\n    default:\n      break;\n  }\n}\n\nfunction createStore(state, stateChanger) {\n  const listeners = [];\n\n  const subscribe = listener => listeners.push(listener);\n\n  const getState = () => state;\n\n  const dispatch = action => {\n    stateChanger(state, action);\n    listeners.forEach(listener => listener());\n  };\n\n  return {\n    getState,\n    dispatch,\n    subscribe\n  };\n}\n\nfunction renderApp(newAppState, oldAppState = {}) {\n  if (newAppState === oldAppState) return;\n  console.log('render app ...');\n  renderTitle(newAppState.title);\n  renderContent(newAppState.content);\n}\n\nfunction renderTitle(newTitle, oldTitle = {}) {\n  if (newTitle === oldTitle) return;\n  console.log('render title ...');\n  const titleDOM = document.getElementById('title');\n  titleDOM.innerHTML = newTitle.text;\n  titleDOM.style.color = newTitle.color;\n}\n\nfunction renderContent(newContent, oldContent = {}) {\n  if (newContent === oldContent) return;\n  console.log('render content ...');\n  const contentDOM = document.getElementById('content');\n  contentDOM.innerHTML = newContent.text;\n  contentDOM.style.color = newContent.color;\n}\n\nconst store = createStore(appState, stateChanger);\nlet oldState = store.getState(); // 缓存旧的state\n\nstore.subscribe(() => {\n  const newState = store.getState(); // 数据可能变化，获取新的state\n\n  renderApp(newState, oldState); // 添加监听函数，修改state后 在 dispatch方案中 自动执行重新渲染逻辑\n});\nrenderApp(store.getState()); //首次渲染\n\nstore.dispatch({\n  type: 'UPDATE_TITLE_TEXT',\n  text: '《React.js 小书》'\n});\nstore.dispatch({\n  type: 'UPDATE_TITLE_COLOR',\n  color: 'green'\n}); // renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/src/index.js"],"names":["appState","title","text","color","content","stateChanger","state","action","type","t","createStore","listeners","subscribe","listener","push","getState","dispatch","forEach","renderApp","newAppState","oldAppState","console","log","renderTitle","renderContent","newTitle","oldTitle","titleDOM","document","getElementById","innerHTML","style","newContent","oldContent","contentDOM","store","oldState","newState"],"mappings":"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","sourcesContent":["const appState = {\n    title : {\n        text : 'React.js 小书',\n        color : 'red'\n    },\n    content : {\n        text : 'React.js 小书内容',\n        color : 'green'\n    }\n}\n\nfunction stateChanger(state , action){\n    switch (action.type) {\n        case 'UPDATE_TITLE_TEXT':\n            state.title.text = {\n                ...state ,\n                title : {\n                    ...state.t\n                }\n            }\n            break;\n        case 'UPDATE_TITLE_COLOR':\n            state.title.color = action.color\n            break;\n        default:\n            break;\n    }\n}\n\nfunction createStore(state , stateChanger){\n    const listeners = []\n    const subscribe = (listener) => listeners.push(listener)\n    const getState = () => state\n    const dispatch = (action) => {\n        stateChanger(state , action)\n        listeners.forEach((listener) => listener())\n    }\n    return { getState , dispatch , subscribe}\n}\n\nfunction renderApp(newAppState , oldAppState = {}){\n    if(newAppState === oldAppState) return\n    console.log('render app ...')\n    renderTitle(newAppState.title)\n    renderContent(newAppState.content)\n}\n\nfunction renderTitle(newTitle , oldTitle = {}){\n    if(newTitle === oldTitle) return\n    console.log('render title ...')\n    const titleDOM = document.getElementById('title')\n    titleDOM.innerHTML = newTitle.text\n    titleDOM.style.color = newTitle.color\n}\n\nfunction renderContent(newContent , oldContent = {}){\n    if(newContent === oldContent) return\n    console.log('render content ...')\n    const contentDOM = document.getElementById('content')\n    contentDOM.innerHTML = newContent.text\n    contentDOM.style.color = newContent.color\n}\n\nconst store = createStore(appState , stateChanger)\nlet oldState = store.getState() // 缓存旧的state\nstore.subscribe(() => {\n    const newState = store.getState() // 数据可能变化，获取新的state\n    renderApp(newState , oldState ) // 添加监听函数，修改state后 在 dispatch方案中 自动执行重新渲染逻辑\n})\nrenderApp(store.getState()) //首次渲染\nstore.dispatch({ type : 'UPDATE_TITLE_TEXT', text : '《React.js 小书》' })\nstore.dispatch({ type : 'UPDATE_TITLE_COLOR', color : 'green' })\n// renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）"]},"metadata":{},"sourceType":"module"}
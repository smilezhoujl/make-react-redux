{"ast":null,"code":"const appState = {\n  title: {\n    text: 'React.js 小书',\n    color: 'red'\n  },\n  content: {\n    text: 'React.js 小书内容',\n    color: 'green'\n  }\n};\n\nfunction stateChanger(state, action) {\n  switch (action.type) {\n    case 'UPDATE_TITLE_TEXT':\n      state.title.text = action.text;\n      break;\n\n    case 'UPDATE_TITLE_COLOR':\n      state.title.color = action.color;\n      break;\n\n    default:\n      break;\n  }\n}\n\nfunction createStore(state, stateChanger) {\n  const listeners = [];\n\n  const subscribe = listener => listeners.push(listener);\n\n  const getState = () => state;\n\n  const dispatch = action => {\n    stateChanger(state, action);\n    listeners.forEach(listener => listener());\n  };\n\n  return {\n    getState,\n    dispatch,\n    subscribe\n  };\n}\n\nfunction renderApp(appState) {\n  renderTitle(appState.title);\n  renderContent(appState.content);\n}\n\nfunction renderTitle(title) {\n  const titleDOM = document.getElementById('title');\n  titleDOM.innerHTML = title.text;\n  titleDOM.style.color = title.color;\n}\n\nfunction renderContent(content) {\n  const contentDOM = document.getElementById('content');\n  contentDOM.innerHTML = content.text;\n  contentDOM.style.color = content.color;\n}\n\nconst store = createStore(appState, stateChanger);\nstore.subscribe(() => renderApp(store.getState())); // 添加监听函数，修改state后 在 dispatch方案中 自动执行重新渲染逻辑\n\nrenderApp(store.getState()); //首次渲染\n\nstore.dispatch({\n  type: 'UPDATE_TITLE_TEXT',\n  text: '《React.js 小书》'\n});\nstore.dispatch({\n  type: 'UPDATE_TITLE_COLOR',\n  color: 'blue'\n}); // renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/src/index.js"],"names":["appState","title","text","color","content","stateChanger","state","action","type","createStore","listeners","subscribe","listener","push","getState","dispatch","forEach","renderApp","renderTitle","renderContent","titleDOM","document","getElementById","innerHTML","style","contentDOM","store"],"mappings":"AAAA,MAAMA,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAG;AACJC,IAAAA,IAAI,EAAG,aADH;AAEJC,IAAAA,KAAK,EAAG;AAFJ,GADK;AAKbC,EAAAA,OAAO,EAAG;AACNF,IAAAA,IAAI,EAAG,eADD;AAENC,IAAAA,KAAK,EAAG;AAFF;AALG,CAAjB;;AAWA,SAASE,YAAT,CAAsBC,KAAtB,EAA8BC,MAA9B,EAAqC;AACjC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,mBAAL;AACIF,MAAAA,KAAK,CAACL,KAAN,CAAYC,IAAZ,GAAmBK,MAAM,CAACL,IAA1B;AACA;;AACJ,SAAK,oBAAL;AACII,MAAAA,KAAK,CAACL,KAAN,CAAYE,KAAZ,GAAoBI,MAAM,CAACJ,KAA3B;AACA;;AACJ;AACI;AARR;AAUH;;AAED,SAASM,WAAT,CAAqBH,KAArB,EAA6BD,YAA7B,EAA0C;AACtC,QAAMK,SAAS,GAAG,EAAlB;;AACA,QAAMC,SAAS,GAAIC,QAAD,IAAcF,SAAS,CAACG,IAAV,CAAeD,QAAf,CAAhC;;AACA,QAAME,QAAQ,GAAG,MAAMR,KAAvB;;AACA,QAAMS,QAAQ,GAAIR,MAAD,IAAY;AACzBF,IAAAA,YAAY,CAACC,KAAD,EAASC,MAAT,CAAZ;AACAG,IAAAA,SAAS,CAACM,OAAV,CAAmBJ,QAAD,IAAcA,QAAQ,EAAxC;AACH,GAHD;;AAIA,SAAO;AAAEE,IAAAA,QAAF;AAAaC,IAAAA,QAAb;AAAwBJ,IAAAA;AAAxB,GAAP;AACH;;AAED,SAASM,SAAT,CAAmBjB,QAAnB,EAA4B;AACxBkB,EAAAA,WAAW,CAAClB,QAAQ,CAACC,KAAV,CAAX;AACAkB,EAAAA,aAAa,CAACnB,QAAQ,CAACI,OAAV,CAAb;AACH;;AAED,SAASc,WAAT,CAAqBjB,KAArB,EAA2B;AACvB,QAAMmB,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAjB;AACAF,EAAAA,QAAQ,CAACG,SAAT,GAAqBtB,KAAK,CAACC,IAA3B;AACAkB,EAAAA,QAAQ,CAACI,KAAT,CAAerB,KAAf,GAAuBF,KAAK,CAACE,KAA7B;AACH;;AAED,SAASgB,aAAT,CAAuBf,OAAvB,EAA+B;AAC3B,QAAMqB,UAAU,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAnB;AACAG,EAAAA,UAAU,CAACF,SAAX,GAAuBnB,OAAO,CAACF,IAA/B;AACAuB,EAAAA,UAAU,CAACD,KAAX,CAAiBrB,KAAjB,GAAyBC,OAAO,CAACD,KAAjC;AACH;;AAED,MAAMuB,KAAK,GAAGjB,WAAW,CAACT,QAAD,EAAYK,YAAZ,CAAzB;AACAqB,KAAK,CAACf,SAAN,CAAgB,MAAMM,SAAS,CAACS,KAAK,CAACZ,QAAN,EAAD,CAA/B,E,CAAmD;;AACnDG,SAAS,CAACS,KAAK,CAACZ,QAAN,EAAD,CAAT,C,CAA4B;;AAC5BY,KAAK,CAACX,QAAN,CAAe;AAAEP,EAAAA,IAAI,EAAG,mBAAT;AAA8BN,EAAAA,IAAI,EAAG;AAArC,CAAf;AACAwB,KAAK,CAACX,QAAN,CAAe;AAAEP,EAAAA,IAAI,EAAG,oBAAT;AAA+BL,EAAAA,KAAK,EAAG;AAAvC,CAAf,E,CACA","sourcesContent":["const appState = {\n    title : {\n        text : 'React.js 小书',\n        color : 'red'\n    },\n    content : {\n        text : 'React.js 小书内容',\n        color : 'green'\n    }\n}\n\nfunction stateChanger(state , action){\n    switch (action.type) {\n        case 'UPDATE_TITLE_TEXT':\n            state.title.text = action.text\n            break;\n        case 'UPDATE_TITLE_COLOR':\n            state.title.color = action.color\n            break;\n        default:\n            break;\n    }\n}\n\nfunction createStore(state , stateChanger){\n    const listeners = []\n    const subscribe = (listener) => listeners.push(listener)\n    const getState = () => state\n    const dispatch = (action) => {\n        stateChanger(state , action)\n        listeners.forEach((listener) => listener())\n    }\n    return { getState , dispatch , subscribe}\n}\n\nfunction renderApp(appState){\n    renderTitle(appState.title)\n    renderContent(appState.content)\n}\n\nfunction renderTitle(title){\n    const titleDOM = document.getElementById('title')\n    titleDOM.innerHTML = title.text\n    titleDOM.style.color = title.color\n}\n\nfunction renderContent(content){\n    const contentDOM = document.getElementById('content')\n    contentDOM.innerHTML = content.text\n    contentDOM.style.color = content.color\n}\n\nconst store = createStore(appState , stateChanger)\nstore.subscribe(() => renderApp(store.getState())) // 添加监听函数，修改state后 在 dispatch方案中 自动执行重新渲染逻辑\nrenderApp(store.getState()) //首次渲染\nstore.dispatch({ type : 'UPDATE_TITLE_TEXT', text : '《React.js 小书》' })\nstore.dispatch({ type : 'UPDATE_TITLE_COLOR', color : 'blue' })\n// renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/src/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\nimport Content from './Content';\nimport './index.css';\n\nclass Index extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }), React.createElement(Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(Index, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}), document.getElementById('root')); // const appState = {\n//     title : {\n//         text : 'React.js 小书',\n//         color : 'red'\n//     },\n//     content : {\n//         text : 'React.js 小书内容',\n//         color : 'green'\n//     }\n// }\n// function reducer(state , action){\n//     if(!state){\n//         return {\n//             title : {\n//                 text : 'React.js 小书',\n//                 color : 'red'\n//             },\n//             content : {\n//                 text : 'React.js 小书内容',\n//                 color : 'green'\n//             }\n//         }\n//     }\n//     switch (action.type) {\n//         case 'UPDATE_TITLE_TEXT':\n//             return {\n//                 ...state ,\n//                 title : {\n//                     ...state.title,\n//                     text : action.text\n//                 }\n//             }\n//         case 'UPDATE_TITLE_COLOR':\n//             return {\n//                 ...state ,\n//                 title : {\n//                     ...state.title ,\n//                     color : action.color\n//                 }\n//             }\n//         default:\n//             return state;\n//     }\n// }\n// function createStore (reducer) {\n//     let state = null\n//     const listeners = []\n//     const subscribe = (listener) => listeners.push(listener)\n//     const getState = () => state\n//     const dispatch = (action) => {\n//       state = reducer(state, action) // 覆盖原对象\n//       listeners.forEach((listener) => listener())\n//     }\n//     dispatch({}) //初始化 state (dispatch default return)\n//     return { getState, dispatch, subscribe }\n// }\n// function renderApp(newAppState , oldAppState = {}){\n//     if(newAppState === oldAppState) return\n//     console.log('render app ...')\n//     renderTitle(newAppState.title , oldAppState.title)\n//     renderContent(newAppState.content , oldAppState.content)\n// }\n// function renderTitle(newTitle , oldTitle = {}){\n//     if(newTitle === oldTitle) return\n//     console.log('render title ...')\n//     const titleDOM = document.getElementById('title')\n//     titleDOM.innerHTML = newTitle.text\n//     titleDOM.style.color = newTitle.color\n// }\n// function renderContent(newContent , oldContent = {}){\n//     if(newContent === oldContent) return\n//     console.log('render content ...')\n//     const contentDOM = document.getElementById('content')\n//     contentDOM.innerHTML = newContent.text\n//     contentDOM.style.color = newContent.color\n// }\n// const store = createStore(reducer)\n// let oldState = store.getState() // 缓存旧的state\n// store.subscribe(() => {\n//     const newState = store.getState() // 数据可能变化，获取新的 state\n//     renderApp(newState, oldState) // 把新旧的 state 传进去渲染\n//     oldState = newState // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n// })\n// renderApp(store.getState()) //首次渲染\n// store.dispatch({ type : 'UPDATE_TITLE_TEXT', text : '《React.js 小书》' })\n// store.dispatch({ type : 'UPDATE_TITLE_COLOR', color : 'green' })\n// // renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）","map":{"version":3,"sources":["/Users/jilin.zhou/Desktop/reactProj/make_react_redux/make-react-redux/src/index.js"],"names":["React","Component","PropTypes","ReactDOM","Header","Content","Index","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;AAC5BM,EAAAA,MAAM,GAAI;AACR,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAR2B;;AAW9BJ,QAAQ,CAACI,MAAT,CACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF,E,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport Header from './Header'\nimport Content from './Content'\nimport './index.css'\n\nclass Index extends Component {\n  render () {\n    return (\n      <div>\n        <Header />\n        <Content />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Index />,\n  document.getElementById('root')\n)\n\n\n// const appState = {\n//     title : {\n//         text : 'React.js 小书',\n//         color : 'red'\n//     },\n//     content : {\n//         text : 'React.js 小书内容',\n//         color : 'green'\n//     }\n// }\n\n// function reducer(state , action){\n//     if(!state){\n//         return {\n//             title : {\n//                 text : 'React.js 小书',\n//                 color : 'red'\n//             },\n//             content : {\n//                 text : 'React.js 小书内容',\n//                 color : 'green'\n//             }\n//         }\n//     }\n//     switch (action.type) {\n//         case 'UPDATE_TITLE_TEXT':\n//             return {\n//                 ...state ,\n//                 title : {\n//                     ...state.title,\n//                     text : action.text\n//                 }\n//             }\n//         case 'UPDATE_TITLE_COLOR':\n//             return {\n//                 ...state ,\n//                 title : {\n//                     ...state.title ,\n//                     color : action.color\n//                 }\n//             }\n//         default:\n//             return state;\n//     }\n// }\n\n// function createStore (reducer) {\n//     let state = null\n//     const listeners = []\n//     const subscribe = (listener) => listeners.push(listener)\n//     const getState = () => state\n//     const dispatch = (action) => {\n//       state = reducer(state, action) // 覆盖原对象\n//       listeners.forEach((listener) => listener())\n//     }\n//     dispatch({}) //初始化 state (dispatch default return)\n//     return { getState, dispatch, subscribe }\n// }\n\n// function renderApp(newAppState , oldAppState = {}){\n//     if(newAppState === oldAppState) return\n//     console.log('render app ...')\n//     renderTitle(newAppState.title , oldAppState.title)\n//     renderContent(newAppState.content , oldAppState.content)\n// }\n\n// function renderTitle(newTitle , oldTitle = {}){\n//     if(newTitle === oldTitle) return\n//     console.log('render title ...')\n//     const titleDOM = document.getElementById('title')\n//     titleDOM.innerHTML = newTitle.text\n//     titleDOM.style.color = newTitle.color\n// }\n\n// function renderContent(newContent , oldContent = {}){\n//     if(newContent === oldContent) return\n//     console.log('render content ...')\n//     const contentDOM = document.getElementById('content')\n//     contentDOM.innerHTML = newContent.text\n//     contentDOM.style.color = newContent.color\n// }\n\n// const store = createStore(reducer)\n// let oldState = store.getState() // 缓存旧的state\n// store.subscribe(() => {\n//     const newState = store.getState() // 数据可能变化，获取新的 state\n//     renderApp(newState, oldState) // 把新旧的 state 传进去渲染\n//     oldState = newState // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n// })\n\n// renderApp(store.getState()) //首次渲染\n// store.dispatch({ type : 'UPDATE_TITLE_TEXT', text : '《React.js 小书》' })\n// store.dispatch({ type : 'UPDATE_TITLE_COLOR', color : 'green' })\n// // renderApp(store.getState()) // 把新的数据渲染到页面上 （调整到 subscribe监听函数中，实现state变更后的自动重新渲染）\n\n\n"]},"metadata":{},"sourceType":"module"}